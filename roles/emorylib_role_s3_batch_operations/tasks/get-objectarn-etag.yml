---
- name: List objects in location KeyPrefix
  aws_s3:
    bucket: '{{ key.split("/")[0] }}'
    prefix: '{{ key.split("/")[1:] | join("/") }}'
    mode: list
  vars:
    key: '{{ s3_batch_op.location.KeyPrefix }}'
  register: list_keys
  when: s3_batch_op.location is defined

- name: Create first placeholder variable with associated keys
  set_fact:
    _s3_batch_op: |
      {{ s3_batch_op | combine({"checksum_key": list_keys.s3_keys | d (False) 
      | select("contains", checksum_search) | list | last | d (False) }, {"json_key": list_keys.s3_keys | d (False) 
      | select("contains", json_search) | list | last | d (False) }, {"number_of_objects_key": list_keys.s3_keys | d (False)
      | select ("contains", number_of_objects_search) | list | last | d (False) }) }}
  vars:
    checksum_search: '{{ location_is_latest | ternary("manifest.checksum", checksum_full) }}'
    checksum_full: '{{ location_date }}/manifest.checksum'
    json_search: '{{ location_is_latest | ternary("manifest.json", json_full) }}'
    json_full: '{{ location_date }}/manifest.json'
    location: '{{ s3_batch_op.location | d () }}'
    location_date: '{{ location.Date | d () }}'
    location_is_latest: '{{ location_date | lower == "latest" | d (False) }}'
    number_of_objects_search: '{{ location_is_latest | ternary("manifest.numberObjects", number_of_objects_full) }}'
    number_of_objects_full: '{{ location_date }}/manifest.numberObjects'
    manifest: '{{ s3_batch_op.manifest }}'

- name: Assert that specified date is valid
  assert:
    that:
      - _s3_batch_op.checksum_key
      - _s3_batch_op.json_key
    quiet: yes
    fail_msg: 'No matching key was found in S3 for the given date, please check the KeyPrefix or date.'
  when: 
    - location_date_input != 'latest'
    - _s3_batch_op.manifest.Location is undefined
  vars:
    location_date_input: '{{ _s3_batch_op.location.Date | d () | lower }}'

- name: Get checksum values as string
  aws_s3:
    bucket: '{{ key.split("/")[0] }}'
    object: '{{ _s3_batch_op.checksum_key }}'
    mode: getstr
  register: checksum_values
  when: _s3_batch_op.checksum_key
  vars:
    key: '{{ _s3_batch_op.location.KeyPrefix }}'

- name: Get number of objects as a string
  aws_s3:
    bucket: '{{ key.split("/")[0] }}'
    object: '{{ _s3_batch_op.number_of_objects_key }}'
    mode: getstr
  register: number_of_object_value
  when: _s3_batch_op.number_of_objects_key
  vars:
    key: '{{ _s3_batch_op.location.KeyPrefix }}'

- name: Set boolean for number of objects
  set_fact:
    number_objects_is_zero: '{{ (number_objects | int == 0 ) | ternary (true, false) }}'
  vars:
    number_objects: '{{ number_of_object_value.contents | d (100) }}'

- name: Prep variable for submission to awscli 
  set_fact:
    __s3_batch_op: |
      {{ _s3_batch_op | combine ({"manifest": {"Location": {"ETag": checksum_values.contents | d (_s3_batch_op.manifest.Location.ETag) | d () | trim,
      "ObjectArn": _s3_batch_op.checksum_key | ternary(object_arn_string, _s3_batch_op.manifest.Location.ObjectArn) }}}, recursive=True) }}
  vars:
    key: '{{ _s3_batch_op.location.KeyPrefix | d () }}'
    object_arn_string: 'arn:aws:s3:::{{ key.split("/")[0] }}/{{ _s3_batch_op.json_key }}'