---
- name: Set fact for bucket target
  set_fact:
    s3_target: 's3://{{ s3.bucket }}/{{ s3.key_prefix }}{{ s3.timestamp | d (false) | ternary (timestamp, "" ) }}'
  vars:
    timestamp: '/{{ ansible_date_time[date_format] }}'
    date_format: '{{ s3.timestamp_format | d ("iso8601_micro") }}'

- name: Copy to S3 (Async)
  shell: 'time aws s3 sync {{ copy.path }} {{ s3_target }}'
  become: '{{ escalate.become | d (omit) }}'
  become_user: '{{ escalate.become_user | d (omit) }}'
  become_method: '{{ escalate.become_method | d (omit) }}'
  async: '{{ copy_to_s3_async }}'
  poll: 0
  register: s3_cp_info

- name: Wait until Copy job finishes
  async_status:
    jid: '{{ s3_cp_info.ansible_job_id }}'
  become: '{{ escalate.become | d (omit) }}'
  become_user: '{{ escalate.become_user | d (omit) }}'
  become_method: '{{ escalate.become_method | d (omit) }}'
  register: s3_cp_result
  until: s3_cp_result.finished
  retries: '{{ copy_to_s3_retries }}'
  delay: '{{ copy_to_s3_delay }}'

- name: Perform LS on s3 target
  shell: 'aws s3 ls --summarize --human-readable --recursive {{ s3_target }}'
  failed_when: false
  register: s3_ls_info

- name: Set facts for report variables
  set_fact:
    total_objects: '{{ objects.split() [-1] }}'
    total_size: '{{ size.split() [-2] }} {{ size.split() [-1] }}'
    upload_time: '{{ real.split() [-1] }}'
  vars:
    objects: '{{ s3_ls_info.stdout_lines | select ("contains", "Total Objects:") | list | first }}'
    real: '{{ s3_cp_info.stderr_lines | select ("contains", "real")  | list | first }}'
    size: '{{ s3_ls_info.stdout_lines | select ("contains", "Total Size:") | list | first }}'