---
- name: Ensure that the tmp directory exists
  file:
    path: '{{ solr_cloud_backup.tmp_path }}/{{ solr_cloud_backup.collection.name }}'
    owner: '{{ solr_cloud_backup_owner }}'
    group: '{{ solr_cloud_backup_group }}'
    state: directory

- name: Call Solr API to start backup process
  uri:
    url: '{{ solr_cloud_backup_base_url }}/collections?'
    body: '{{ solr_cloud_backup_post_params | join("&") }}'
    method: POST
  register: solr_cloud_backup_request_info

- name: Set facts from API call
  set_fact:
    request_id: '{{ solr_cloud_backup_request_info | json_query("json.requestid") }}'
    temp_dir: '{{ solr_cloud_backup.tmp_path }}/{{ solr_cloud_backup.collection.name }}/{{ ansible_date_time.iso8601_micro }}'

- name: Wait for temp directory to become available
  wait_for:
    path: '{{ temp_dir }}'

- name: Ensure temp directory has not be written to for at least 5 seconds
  find:
    paths: '{{ temp_dir }}'
    age: -5s
    recurse: yes
  register: find_new_files
  retries: '{{ solr_cloud_backup_retries }}'
  delay: '{{ solr_cloud_backup_delay }}'
  until: find_new_files.matched == 0 

- name: Ensure backup job completed via request id lookup
  uri:
    url: '{{ solr_cloud_backup_base_url }}/collections?'
    body: '{{ params | join("&") }}'
    method: POST
  vars:
    params:
      - action=requeststatus
      - 'requestid={{ request_id }}'
    state: '{{ backup_status | json_query("json.status.state") }}'
  register: backup_status
  until: state == 'completed'
  failed_when: state == 'failed'
  retries: '{{ solr_cloud_backup_retries }}'
  delay: '{{ solr_cloud_backup_delay }}'