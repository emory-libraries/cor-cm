---
- name: API Call Backup Solr Cloud Collection
  uri:
    url: '{{ sc_base_url }}/collections?'
    body: '{{ sc_backup_params | join("&") }}'
    method: POST
    creates: '{{ item.location | d (sc_backup_location) }}/{{ item.name }}-{{ ansible_date_time.epoch }}'
  loop: '{{ sc_backup_list }}'
  loop_control:
    extended: yes
  register: sc_backup_collection

- name: Get request IDs
  set_fact:
    request_ids: '{{ sc_backup_collection | json_query("results[].json.requestid") }}'

- debug:
    var: sc_backup_collection

- pause: 

- name: Create list of snapshot paths
  set_fact:
    snapshot_paths: '{{ sc_backup_collection.results | map(attribute="invocation") | map(attribute="module_args") | map(attribute="creates") | reject("undefined") | list }}'

- name: Check snapshot folder until no files are being written to it
  find:
    paths: '{{ snapshot_paths }}'
    age: -5s
    recurse: yes
  register: find_new_files
  retries: '{{ sc_backup_retries }}'
  delay: '{{ sc_backup_delay }}'
  until: find_new_files.matched == 0

- name: Create .tar.gz file from snapshot directory
  archive:
    path: '{{ item }}'
    dest: '/tmp/{{ item | basename }}.tar.gz'
  loop: '{{ snapshot_paths }}'

- name: Copy tar.gz file to S3 bucket
  aws_s3:
    bucket: '{{ item.0.bucket | d (sc_backup_bucket) }}'
    object: '{{ item.0.bucket_key | d (sc_backup_bucket_key) | regex_replace(get_trailing_slash, "") }}/{{ item.1 | basename }}.tar.gz'
    src: '/tmp/{{ item.1 | basename }}.tar.gz'
    mode: put
  vars:
    get_trailing_slash: \/$
  loop: '{{ sc_backup_list | zip(snapshot_paths) | list }}'
    