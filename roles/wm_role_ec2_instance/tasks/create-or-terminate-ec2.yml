---
- name: Create or destroy EC2
  ec2_instance:
    state: "{{ ec2_state | d ('present') }}"
    availability_zone: "{{ ec2_availability_zone | d (omit) }}"
    cpu_credit_specification: "{{ ec2_cpu_credit_specification | d (omit) }}"
    cpu_options: "{{ ec2_cpu_options | d (omit) }}"
    detailed_monitoring: "{{ ec2_detailed_monitoring | d (omit) }}"
    ebs_optimized: "{{ ec2_ebs_optimized | d (omit) }}"
    filters:
      'tag:Name': "{{ inventory_hostname | d (omit) }}"
      instance-state-name: running
    image: "{{ ec2_image_dict | d (omit) }}"
    image_id: "{{ ec2_image | d (omit) }}"
    instance_ids: "{{ ec2_instance_ids | d (omit) }}"
    instance_initiated_shutdown_behavior: "{{ ec2_instance_initiated_shutdown_behavior | d ('terminate') }}"
    instance_role: "{{ ec2_instance_role | d (omit) }}"
    instance_type: "{{ ec2_instance_type | d (omit) }}"
    key_name: "{{ ec2_key_name }}"
    launch_template: "{{ ec2_launch_template | d (omit) }}"
    name: "{{ ec2_fqdn }}"
    network: "{{ ec2_network_dict | d (omit) }}"
    purge_tags: "{{ ec2_purge_tags | d (omit) }}"
    region: "{{ aws_region | d (omit) }}"
    security_groups: "{{ ec2_security_groups }}"
    tags: "{{ ec2_tags | d (omit) }}"
    tenancy: "{{ ec2_tenancy | d (omit) }}"
    termination_protection: "{{ ec2_termination_protection | d (omit) }}"
    tower_callback: "{{ ec2_tower_callback | d (omit) }}"
    user_data: "{{ ec2_user_data | d (omit) }}"
    volumes: "{{ ec2_default_volume + ec2_additional_volumes | d (omit) }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id | d (omit) }}"
    wait: "{{ ec2_wait | d (false if ec2_state is defined and ec2_state == 'absent' else true) }}"
    wait_timeout: "{{ ec2_wait_timeout | d (10) }}"
  register: ec2
  tags:
    - delete-ec2

- name: Set ec2 variables 
  set_fact:
    ec2_private_ip: "{{ ec2 | json_query(query) | join (' ')  }}"
    ec2_state_name: "{{ ec2 | json_query(query2) | join (' ') }}"
    ec2_id: "{{ ec2 | json_query(query3) | join (' ') }}"
    ec2_public_ip: "{{ ec2 | json_query(query4) | join (' ')  }}"
  vars:
    query: "instances[?tags.Name=='{{ inventory_hostname }}'].private_ip_address"
    query2: "instances[?tags.Name=='{{ inventory_hostname }}'].state.name"
    query3: "instances[?tags.Name=='{{ inventory_hostname }}'].instance_id"
    query4: "instances[?tags.Name=='{{ inventory_hostname }}'].public_ip_address"

#- name: Create temporary group with ec2_IDs
#  add_host:
#    name: "{{ hostvars[item]['ec2_id'] }}"
#    groups: ec2_ids
#  loop: "{{ ansible_play_hosts }}"
